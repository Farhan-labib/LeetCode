https://leetcode.com/problems/valid-sudoku/description/


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        x=[[],[],[],[],[],[],[],[],[]]
        for i in board:
            q=-1
            for j in i:
                q+=1
                if(j!="."):
                    x[q].append(j)
                    if(i.count(j)>1):
                        return False
        a=board[0][0:3]+board[1][0:3]+board[2][0:3]
        b=board[3][0:3]+board[4][0:3]+board[5][0:3]
        c=board[6][0:3]+board[7][0:3]+board[8][0:3]
        a1=board[0][3:6]+board[1][3:6]+board[2][3:6]
        b1=board[3][3:6]+board[4][3:6]+board[5][3:6]
        c1=board[6][3:6]+board[7][3:6]+board[8][3:6]
        a2=board[0][6:9]+board[1][6:9]+board[2][6:9]
        b2=board[3][6:9]+board[4][6:9]+board[5][6:9]
        c2=board[6][6:9]+board[7][6:9]+board[8][6:9]
        a=list(filter((".").__ne__, a))
        b=list(filter((".").__ne__, b))
        c=list(filter((".").__ne__, c))
        a1=list(filter((".").__ne__, a1))
        b1=list(filter((".").__ne__, b1))
        c1=list(filter((".").__ne__, c1))
        a2=list(filter((".").__ne__, a2))
        b2=list(filter((".").__ne__, b2))
        c2=list(filter((".").__ne__, c2))
        print(x)
        if(len(a)>len(set(a))):
            return False
        if(len(b)>len(set(b))):
            return False
        if(len(c)>len(set(c))):
            return False
        if(len(a1)>len(set(a1))):
            return False
        if(len(b1)>len(set(b1))):
            return False
        if(len(c1)>len(set(c1))):
            return False
        if(len(a2)>len(set(a2))):
            return False
        if(len(b2)>len(set(b2))):
            return False
        if(len(c2)>len(set(c2))):
            return False
        for i in x:
            for j in i:
                if(j!="."):
                    if(i.count(j)>1):
                        return False
        return True
